================
Modify Documents
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB provides the :method:`~db.collection.update()` method to update
the documents of a collection. The method accepts as its parameters:

- a query filter document to determine which documents to update,

- an update document to specify the modification to perform or a
  replacement document that wholly replaces the matching documents
  except for the ``_id`` field, and

- an options document.

By default, :method:`~db.collection.update()` updates a single
document. To update multiple documents, use the :ref:`multi
<multi-parameter>` option.

.. _update-documents-modifiers:

Update Specific Fields in a Document
------------------------------------

To change a field value, MongoDB provides :manual:`update operators
</reference/operator/update>`, such as :update:`$set` to modify values.

To specify the modification to perform using update operators, use an
update document of the form:

.. code-block:: javascript

   {
      <update operator>: { <field1>: <value1>, ... },
      <update operator>: { <field2>: <value2>, ... },
      ...
   }

Some update operators, such as :update:`$set`, will create the field if
the field does not exist. See the individual :manual:`update operator
</reference/operator/update>` reference.

.. include:: /includes/steps/getting-started-update.rst

Replace the Document
--------------------

To replace the entire content of a document except for the ``_id``
field, pass an entirely new document as the second argument to
:method:`~db.collection.update()`.

The replacement document can have different fields from the original
document. In the replacement document, you can omit the ``_id`` field
since the ``_id`` field is immutable. If you do include the ``_id``
field, it must be the same value as the existing value.

.. include:: /includes/steps/getting-started-update-replace.rst

``upsert`` Option
-----------------

By default, if no document matches the update query, the
:method:`~db.collection.update()` method does nothing.

However, by specifying :ref:`upsert: true <upsert-parameter>`, the
:method:`~db.collection.update()` method either updates matching
document or documents, or inserts a new document using the update
specification if no matching document exists.

.. include:: /includes/steps/getting-started-update-upsert.rst

Additional Examples and Methods
-------------------------------

For more examples, see :ref:`Update examples <update-method-examples>`
in the :method:`db.collection.update()` reference page.

The :method:`db.collection.findAndModify()` and the
:method:`db.collection.save()` method can also modify existing
documents or insert a new one. See the
individual reference pages for the methods for more information and
examples.
